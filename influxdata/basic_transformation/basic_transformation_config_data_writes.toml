# Basic Transformation Plugin Data Write Configuration Template
# Copy this file to your PLUGIN_DIR and reference it with `--trigger-arguments config_file_path=basic_transformation_config_data_writes.toml`

########## Required Parameters ##########
# InfluxDB measurement to query
# Specify the measurement name from your source InfluxDB database
measurement = "your_measurement"  # e.g., "temperature", "cpu_load", "home"

# Destination measurement for writing transformed data
# Specify the name of the measurement where transformed data will be written
target_measurement = "your_target_measurement"  # e.g., "transformed_temperature", "processed_home"


########## Optional Parameters ##########
# Optional InfluxDB database for writing transformed data
# Specify the target database name; if omitted, the source database is used
#target_database = "your_target_database"  # e.g., "transformed_db", "processed_data"

# Include only these fields and tags
# List fields and tags to include in the transformation; leave empty to include all fields and tags
#included_fields = ["field1", "field2", "tag1"]  # e.g., ["temp", "hum", "location"]

# Exclude these fields and tags
# List fields and tags to exclude from the transformation; leave commented or empty to include all fields and tags
#excluded_fields = ["field1", "field2", "tag1"]  # e.g., ["co", "hum2", "device_id"]

# Dry run mode: if true, logs transformed data without writing to the database
# Set to "true" for testing or "false" to write data
#dry_run = "true"

# Filters to select specific data
# Format: [[field, operator, value], ...]
# Supported operators: =, !=, >, <, >=, <=
# Example: [["temp", ">=", 20], ["hum", "<=", 80]]
#filters = [["field1", ">=", 0], ["field2", "<=", 100]]

# Transformations to apply to field and tag names
# Specify transformations like "snake", "upper", "lower", or custom rules
#[names_transformations]
#field1 = ["snake", "upper"]  # e.g., ["snake", "upper"]
#regex_pattern = ["cust_replace", "lower"]  # e.g., ["cust_replace", "lower"]

# Transformations to apply to field and tag values
# Specify transformations like "convert_degC_to_degF", "upper", or custom rules
#[values_transformations]
#field1 = ["transformation1"]  # e.g., ["convert_degC_to_degF"]
#field2 = ["transformation2"]  # e.g., ["upper"]

# Note: If both names_transformations and values_transformations are empty, an error will be raised

# Custom replacement rules for string-based transformations
# Format: rule_name = ["old_string", "new_string"]
# Apply rules by listing rule names in names_transformations or values_transformations
#[custom_replacements]
#replace_space_underscore = [" ", "_"]  # Replace spaces with underscores
#custom_rule = ["old_value", "new_value"]  # e.g., ["temp", "temperature"]

# Custom regex patterns for name/value matching
# Format: pattern_name = "pattern_value"  # Use % for zero or more chars, _ for one char
# Apply by listing pattern_name in names_transformations or values_transformations
#[custom_regex]
#regex_pattern = "pattern%"  # e.g., "temp%"

###### Example: Create Trigger Using This Config ######
# influxdb3 create trigger \
#   --database your_database_name \
#   --plugin-filename basic_transformation.py \
#   --trigger-spec "all_tables" \
#   --trigger-arguments config_file_path=basic_transformation_config_data_writes.toml \
#   your_trigger_name